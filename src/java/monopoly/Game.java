package monopoly;


import monopoly.groups.Country;
import monopoly.groups.SimpleAssetGroup;
import monopoly.players.Player;
import monopoly.squares.SimpleSquare;
import monopoly.squares.Square;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 * this class represents a simple model of a monopoly game
 * it represents the game board and players and has no game logic
 * @author Dana Akerman
 */
public class Game 
{

    
    // constants
    //-------------------------------------------------------------
    
    public static final int BOARD_SIZE = 36;
    public static final int NUM_SIMPLE_ASSETS = 2;
    public static final int UTILS = 0;
    public static final int TRANSPORTATION = 1;
    public static final int MIN_NUM_PLAYERS = 2;
    public static final int MAX_NUM_PLAYERS = 6;
    public static final int START_CASH = 1500;
    
    // data members
    //-------------------------------------------------------------
    
    private String _name;
    private Square[] _gameBoard;
    private ArrayList<Player> _players;
    private ArrayList<Country> _countries;
    private SimpleAssetGroup _utils;
    private SimpleAssetGroup _tranportation;
    private SimpleSquare _surprise;
    private SimpleSquare _warrant;
    private boolean _autoDice;

    // c'tor
    //-------------------------------------------------------------
    
    /**
     * constructs a game
     * @param XMLgame the Monopoly object generated by JAXB from the schema
     * @throws NullPointerException if XMLgame is null
     */
    public Game(generated.Monopoly XMLgame) 
    {
        _gameBoard = new Square[BOARD_SIZE];
        _players = new ArrayList<Player>();
        _countries = new ArrayList<Country>();
        _utils = new SimpleAssetGroup();
        _tranportation = new SimpleAssetGroup();
        _surprise = new SimpleSquare(SimpleSquare.SURPRISE);
        _warrant = new SimpleSquare(SimpleSquare.WARRANT);

        this.init(XMLgame);
    }

    // methods
    //-------------------------------------------------------------
    
    /**
     * gets the game name
     * @return the game name
     */
    public String getName() {return _name;}
    
    //-------------------------------------------------------------

    /**
     * gets the game board
     * @return the game board
     */
    public Square[] getBoard() {return _gameBoard;}
    
    //-------------------------------------------------------------

    /**
     * gets the warrant square
     * @return the warrant square
     */
    public SimpleSquare getWarrant() {return _warrant;}
    
    //-------------------------------------------------------------

    /**
     * gets the surprise square
     * @return the surprise square
     */
    public SimpleSquare getSurprise() {return _surprise;}
    
    //-------------------------------------------------------------

    /**
     * gets the players of the game
     * @return the players of the game
     */
    public ArrayList<Player> getPlayers() {return _players;}
    
    //-------------------------------------------------------------

    /**
     * check if the game is played with automatic dice
     * @return true if the game is played with automatic dice
     */
    public boolean isAutoDice() {return _autoDice;}
    
    //-------------------------------------------------------------

    /**
     * inits the game from the XMLgame Monopoly object created from the schema generated class Monopoly
     * @param XMLgame the XMLgame object created from the schema generated class Monopoly
     * @throws NullPointerException if XMLgame is null
     */
    private void init(generated.Monopoly XMLgame) 
    {
        if (XMLgame == null) 
            throw new NullPointerException("XMLgame is null");
       

        // init countries
        try 
        {
            int numCountries = XMLgame.getCountries().getSize();

            for (int i = 0; i < numCountries; i++) 
            {
                generated.Country XMLcountry = XMLgame.getCountries().getCountry().get(i);
                Country myCountry = new Country();
                myCountry.init(XMLcountry);
                _countries.add(myCountry);
            }
        } 
        catch (RuntimeException e) 
        {
            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, e);
        }

        // init utils and transportation
        try 
        {
            for (int i = 0; i < NUM_SIMPLE_ASSETS; i++) 
            {
                int type = XMLgame.getSimpleAssetGroups().getGroup().get(i).getType().ordinal();
                generated.Group XMLassetGroup = XMLgame.getSimpleAssetGroups().getGroup().get(i);
                if (type == UTILS) 
                {
                    _utils.init(XMLassetGroup);
                } 
                else if (type == TRANSPORTATION) 
                {
                    _tranportation.init(XMLassetGroup);
                }
            }
        } 
        catch (RuntimeException e) 
        {
            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, e);
        }

        this.initBoard();
    }
    
    //-------------------------------------------------------------

    /**
     * inits the board
     */
    private void initBoard() 
    {

        _gameBoard[0] = new SimpleSquare(SimpleSquare.START_SQUARE);
        _gameBoard[1] = _countries.get(0).getAssetByIndex(0);
        _gameBoard[2] = _countries.get(0).getAssetByIndex(1);
        _gameBoard[3] = _surprise;
        _gameBoard[4] = _tranportation.getAssetByIndex(0);
        _gameBoard[5] = _countries.get(1).getAssetByIndex(0);
        _gameBoard[6] = _countries.get(1).getAssetByIndex(1);
        _gameBoard[7] = _countries.get(1).getAssetByIndex(2);
        _gameBoard[8] = _warrant;
        _gameBoard[9] = new SimpleSquare(SimpleSquare.JAIL_OR_FREE_PASS);
        _gameBoard[10] = _countries.get(2).getAssetByIndex(0);
        _gameBoard[11] = _countries.get(2).getAssetByIndex(1);
        _gameBoard[12] = _countries.get(2).getAssetByIndex(2);
        _gameBoard[13] = _utils.getAssetByIndex(0);
        _gameBoard[14] = _tranportation.getAssetByIndex(1);
        _gameBoard[15] = _countries.get(3).getAssetByIndex(0);
        _gameBoard[16] = _countries.get(3).getAssetByIndex(1);
        _gameBoard[17] = _countries.get(3).getAssetByIndex(2);
        _gameBoard[18] = new SimpleSquare(SimpleSquare.PARKING);
        _gameBoard[19] = _countries.get(4).getAssetByIndex(0);
        _gameBoard[20] = _countries.get(4).getAssetByIndex(1);
        _gameBoard[21] = _countries.get(4).getAssetByIndex(2);
        _gameBoard[22] = _warrant;
        _gameBoard[23] = _tranportation.getAssetByIndex(2);
        _gameBoard[24] = _countries.get(5).getAssetByIndex(0);
        _gameBoard[25] = _countries.get(5).getAssetByIndex(1);
        _gameBoard[26] = _countries.get(5).getAssetByIndex(2);
        _gameBoard[27] = new SimpleSquare(SimpleSquare.GO_TO_JAIL);
        _gameBoard[28] = _countries.get(6).getAssetByIndex(0);
        _gameBoard[29] = _countries.get(6).getAssetByIndex(1);
        _gameBoard[30] = _countries.get(6).getAssetByIndex(2);
        _gameBoard[31] = _utils.getAssetByIndex(1);
        _gameBoard[32] = _tranportation.getAssetByIndex(3);
        _gameBoard[33] = _countries.get(7).getAssetByIndex(0);
        _gameBoard[34] = _countries.get(7).getAssetByIndex(1);
        _gameBoard[35] = _countries.get(7).getAssetByIndex(2);
        
    }
    
    //-------------------------------------------------------------

    /**
     * gets the player in the given name
     * @param name the name of the player to get
     * @return the player with the given name or null if doesn't exist
     * @throws NullPointerException if name is null
     */
    public Player getPlayerByName(String name) 
    {
        if (name == null)
            throw new NullPointerException("player name is null");
        

        for (int i = 0; i < _players.size(); i++) 
        {
            Player p = _players.get(i);
            if (p.getName().equals(name)) 
            {
                return p;
            }
        }

        return null;
    }

    //-------------------------------------------------------------
    
    /**
     * gets the square in the given index
     * @param index the index of the square to get
     * @return the square with this index
     * @throws IndexOutOfBoundsException if index is out of bounds
     */
    public Square getSquareByIndex(int index) 
    {
        
        if(index < 0 || index > BOARD_SIZE)
            throw new IndexOutOfBoundsException("illegal square index");
        
        return _gameBoard[index];
    }

    //-------------------------------------------------------------
   
    /**
     * sets the name of the game
     * @param name the name to set
     * @throws NullPointerException if name is null
     */
    public void setName(String name) 
    {
        if (name != null) 
        {
            _name = name;
        } 
        else 
            throw new NullPointerException("game name is null");
    }

    //-------------------------------------------------------------
    
    /**
     * sets the autodice flag
     * @param val the boolean val to set
     */
    public void setAutoDice(boolean val) 
    {
        _autoDice = val;
    }

    //-------------------------------------------------------------
    
    /**
     * adds a player to the game
     * @param player the player to add
     * @throws NullPointerException if player is null
     */
    public void addPlayer(Player player) 
    {
        if (player != null) 
        {
            _players.add(player);
        } 
        else 
            throw new NullPointerException("player is null");
    }
    

}
